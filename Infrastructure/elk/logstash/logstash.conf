input {
    beats{
        port => 5044
    }
}


filter {


    mutate {
        id => "mutate-ansii-colours"
        gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|M|K]", ""]
    }

    if "etl_jobs" in [tags] {

    

        dissect {
            mapping  => {
                "[log][file][path]" => "/var/log/job_logs/dag_id=%{dag.id}/run_id=%{run.id}/task_id=%{task.id}"
            }
        }

        grok {
            match  => {
                "message" => "\[%{TIMESTAMP_ISO8601:task.exec_date}\] \{%{DATA:dag.script_source}\} %{LOGLEVEL:airflow.loglevel} - %{GREEDYDATA:job_log}"
            }
        }

        if "dw_" in [task.id] or "ods_" in [task.id] {

            if "[" in [job_log] {
                grok {
                    match => {
                        "[job_log]" => "\[%{DATA:job.loglevel}\] %{TIME:job.time} %{DATA:job.talend_project}.%{DATA:job.talend_job}- %{DATA:job.component} %{GREEDYDATA:log_msg}"
                    }
                }
            } else {
                mutate {
                    copy => {"[job_log]" => "[log_msg]" }
                }
            }

        } else {
            if [job_log] =~ /^\d{4}-\d{2}-\d{2}.*/ {

                grok {
                    match  => {
                        "[job_log]" => "%{DATA:job.datetime} \| %{LOGLEVEL:job.loglevel}\s* \| %{DATA:job.p.module}:%{DATA:job.p.func}:%{INT:job.p.linenum} \| Thread-\[%{DATA:job.thread_id}\] : %{GREEDYDATA:log_msg}"
                    }
                }

                mutate {
                    gsub => ["job.loglevel","\s",""]
                }

                date {
                    match => [ "job.datetime", "yyyy-MM-dd HH:mm:ss.SSS" ]
                }
            } else {
                mutate {
                    copy => {"[job_log]" => "[log_msg]" }
                }
            }
            
            
        }

        mutate {
            remove_field => ["message","job_log"]
        }

        mutate { add_field => { "[@metadata][target_index]" => "etl_jobs" } }

    } else if "airflow_infra" in [tags] {
        grok {
            match =>  {
                "message" => [
                    "%{IP:client_ip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:response_bytes} \"%{DATA:referrer}\" \"%{DATA:user_agent}\"",
                    "\[%{DATA:timestamp_err}\] \[%{INT:pid}\] \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:log_message}",
                    "\[%{TIMESTAMP_ISO8601:timestamp}\] \{%{DATA:logger}\} %{LOGLEVEL:log_level} - %{GREEDYDATA:log_message}"
                ]
            }
        }

        date {
            match => ["timestamp_err", "yyyy-MM-dd HH:mm:ss Z"]
            target => "timestamp"
        }

        mutate {
            remove_field => ["timestamp_err"]
        }
        
        mutate { add_field => { "[@metadata][target_index]" => "airflow_infra" } }

        if "airflow_scheduler_logs" in [tags] {
            mutate { add_field => { "log_source" => "airflow_scheduler_logs" } }
        } else if "airflow_processor_logs" in [tags] {
            mutate { add_field => { "log_source" => "airflow_processor_logs" } }
        }else {
            mutate { add_field => { "log_source" => "%{[container][name]}" } }
        }

    } else if "db_infra" in [tags] {

    } else if "selenium_infra" in [tags] {
        grok {
            match => {
                "message" => [
                    "%{TIME:timestamp} %{LOGLEVEL:log_level} \[%{DATA:log_source}\] - %{GREEDYDATA:log_msg}",
                    "%{DATA:datetime} %{LOGLEVEL:log_level} %{GREEDYDATA:log_msg}"

                ]
            }
        }
        if [datetime] {
            date {
                match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS"]
                target => "timestamp"
            }
            mutate {
                remove_field => ["datetime"]
            }
        }
        mutate { add_field => { "[@metadata][target_index]" => "selenium_infra" } }
    } else if "prom_infra" in [tags] {
        
    } else if "elk_infra" in [tags] {
        
    }
}


output {

  

        # index => "%{[@metadata][target_index]}"
        # data_stream => "true"
        # data_stream_type => "logs"
        # data_stream_dataset => "%{[@metadata][target_index]}"
        # data_stream_namespace => "etl"  

        # index => "logs-%{[@metadata][target_index]}-etl"
      


    if [@metadata][target_index] == "etl_jobs" {

        elasticsearch {
            hosts => ["https://es01:9200"]
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_certificate_authorities => ["${ssl.certificate_authorities}"]
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "etl_jobs"
            data_stream_namespace => "job_offers"          
        }

    } else if [@metadata][target_index] == "airflow_infra" {
        elasticsearch {
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "airflow_infra"
            data_stream_namespace => "job_offers"  
            hosts => ["https://es01:9200"]
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_certificate_authorities => ["${ssl.certificate_authorities}"]
        }
    } else if [@metadata][target_index] == "selenium_infra" {
        elasticsearch {
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "selenium_infra"
            data_stream_namespace => "job_offers"  
            hosts => ["https://es01:9200"]
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            ssl_certificate_authorities => ["${ssl.certificate_authorities}"]
        }
    }
}
